html, body {
	height:100%;
	width:100%;
  background-color: #111;
}

/* Sections of Layout
-------------------------------------- */
/* Layout is stacked vertically by default (for narrower viewports), so give some breathing room between the sections. */
.container > * {
  margin-bottom: 10px;
}

/* Now let's apply grid for wider viewports. */
@media screen and (min-width: 40em) {
  .container > * {
    margin-bottom: 0;
  }
  /* Define the grid */
  .container {
    display: grid;
    grid-template-columns: .6fr 3fr .6fr;
    grid-gap: 10px 20px;
    grid-template-rows: 6em minmax(20em,100em) 6em;
  }
  /* Place items on the grid */
  .header {
    grid-column: 1 / -1;

  }
  .sidebar {
    grid-row-end: span 2;
  }
  .content {
    grid-column: 2;
  }

}

/* Generic styles for demo purposes
-------------------------------------- */
.container {
  font-family: Helvetica, Arial, sans-serif;
  margin-left: auto;
  margin-right: auto;
  max-width: 75rem;
  height:96%;
  width:96%;
}

.container > * {
  background-color: #ccc;
  padding: 1em;
}

/* Typically, you wouldn't specify a height or min-height on this, instead allowing your actual content (i.e., text, images, etc.) to dictate the height of your content area. But since this example has very minimal content, I've set a min-height to mimic a taller content area. */
.content {
  min-height: 40%
}
